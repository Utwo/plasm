// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pq6ug4ikuYjpL7VEiqrPsS
// Component: uyWzwSszdbnKp
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_proiect_propriu.module.css"; // plasmic-import: pq6ug4ikuYjpL7VEiqrPsS/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: uyWzwSszdbnKp/css

import Ellipse12Icon from "./icons/PlasmicIcon__Ellipse12"; // plasmic-import: g4DB_p21vA/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  iPadMini?: p.Flex<"div">;
  cardList?: p.Flex<"div">;
  frame3?: p.Flex<"div">;
  frame5?: p.Flex<"div">;
  c?: p.Flex<"div">;
  frame1?: p.Flex<"div">;
  b?: p.Flex<"div">;
  frame12?: p.Flex<"div">;
  a?: p.Flex<"div">;
  frame13?: p.Flex<"div">;
  a2?: p.Flex<"div">;
  frame14?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  dataFetches: PlasmicHomepage__Fetches;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  dataFetches?: PlasmicHomepage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"iPadMini"}
            data-plasmic-override={overrides.iPadMini}
            hasGap={true}
            className={classNames(defaultcss.all, sty.iPadMini)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"cardList"}
              data-plasmic-override={overrides.cardList}
              hasGap={true}
              className={classNames(defaultcss.all, sty.cardList)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame3"}
                data-plasmic-override={overrides.frame3}
                hasGap={true}
                className={classNames(defaultcss.all, sty.frame3)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame5"}
                  data-plasmic-override={overrides.frame5}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.frame5)}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__wlMwJ)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"179px" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"401px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/proiect_propriu/images/term1.png",
                    fullWidth: 1327,
                    fullHeight: 784,
                    aspectRatio: undefined
                  }}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"c"}
                data-plasmic-override={overrides.c}
                hasGap={true}
                className={classNames(defaultcss.all, sty.c)}
              >
                <Ellipse12Icon
                  className={classNames(defaultcss.all, sty.svg___7Bl)}
                  role={"img"}
                />

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame1"}
                  data-plasmic-override={overrides.frame1}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.frame1)}
                />
              </p.Stack>

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__a0K1C)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/proiect_propriu/images/camp1Jpg.jpeg",
                  fullWidth: 3840,
                  fullHeight: 2160,
                  aspectRatio: undefined
                }}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"b"}
                data-plasmic-override={overrides.b}
                hasGap={true}
                className={classNames(defaultcss.all, sty.b)}
              >
                <Ellipse12Icon
                  className={classNames(defaultcss.all, sty.svg__knDtX)}
                  role={"img"}
                />

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame12"}
                  data-plasmic-override={overrides.frame12}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.frame12)}
                />
              </p.Stack>

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__mnpv)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"239px" as const}
                displayMinWidth={"0" as const}
                displayWidth={"538px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/proiect_propriu/images/camp1Jpg.jpeg",
                  fullWidth: 3840,
                  fullHeight: 2160,
                  aspectRatio: undefined
                }}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"a"}
                data-plasmic-override={overrides.a}
                hasGap={true}
                className={classNames(defaultcss.all, sty.a)}
              >
                <Ellipse12Icon
                  className={classNames(defaultcss.all, sty.svg__qsViS)}
                  role={"img"}
                />

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame13"}
                  data-plasmic-override={overrides.frame13}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.frame13)}
                />
              </p.Stack>

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___8A0Ho)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/proiect_propriu/images/term12.png",
                  fullWidth: 1327,
                  fullHeight: 784,
                  aspectRatio: undefined
                }}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"a2"}
                data-plasmic-override={overrides.a2}
                hasGap={true}
                className={classNames(defaultcss.all, sty.a2)}
              >
                <Ellipse12Icon
                  className={classNames(defaultcss.all, sty.svg__am9Hj)}
                  role={"img"}
                />

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame14"}
                  data-plasmic-override={overrides.frame14}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.frame14)}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "iPadMini",
    "cardList",
    "frame3",
    "frame5",
    "c",
    "frame1",
    "b",
    "frame12",
    "a",
    "frame13",
    "a2",
    "frame14"
  ],
  iPadMini: [
    "iPadMini",
    "cardList",
    "frame3",
    "frame5",
    "c",
    "frame1",
    "b",
    "frame12",
    "a",
    "frame13",
    "a2",
    "frame14"
  ],
  cardList: [
    "cardList",
    "frame3",
    "frame5",
    "c",
    "frame1",
    "b",
    "frame12",
    "a",
    "frame13",
    "a2",
    "frame14"
  ],
  frame3: ["frame3", "frame5"],
  frame5: ["frame5"],
  c: ["c", "frame1"],
  frame1: ["frame1"],
  b: ["b", "frame12"],
  frame12: ["frame12"],
  a: ["a", "frame13"],
  frame13: ["frame13"],
  a2: ["a2", "frame14"],
  frame14: ["frame14"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  iPadMini: "div";
  cardList: "div";
  frame3: "div";
  frame5: "div";
  c: "div";
  frame1: "div";
  b: "div";
  frame12: "div";
  a: "div";
  frame13: "div";
  a2: "div";
  frame14: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomepage__Fetches;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iPadMini: makeNodeComponent("iPadMini"),
    cardList: makeNodeComponent("cardList"),
    frame3: makeNodeComponent("frame3"),
    frame5: makeNodeComponent("frame5"),
    c: makeNodeComponent("c"),
    frame1: makeNodeComponent("frame1"),
    b: makeNodeComponent("b"),
    frame12: makeNodeComponent("frame12"),
    a: makeNodeComponent("a"),
    frame13: makeNodeComponent("frame13"),
    a2: makeNodeComponent("a2"),
    frame14: makeNodeComponent("frame14"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
